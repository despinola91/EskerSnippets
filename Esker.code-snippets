{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	//#region Looping internal form tables

		"SOP - Looping materials": 
		{
			"description": "Looping materials",
			"prefix": ["for","loop","query", "esker"],
			"body": [
				"var materialsTable = Data.GetTable(\"Product_List__\");",
				"var itemCount = materialsTable.GetItemCount();\n",
				"for (var i = 0; i < itemCount; i++)",
				"{",
				"\t$0var item = materialsTable.GetItem(i);",
				"\tvar ${1:variable} = item.GetValue(\"${2:field}\");",
				"\titem.SetValue(\"${3:field}\", ${4:value});",
				"}"
			]
		},

		"AP - Looping items":
		{
			"description": "Looping line items on server side",
			"prefix": ["for","loop","query", "esker"],
			"body": [
				"var lineItemsTable = Data.GetTable(\"LineItems__\");",
				"var itemCount = lineItemsTable.GetItemCount();\n",
				"for (var i = 0; i < itemCount; i++)",
				"{",
				"\t$0var item = lineItemsTable.GetItem(i);",
				"\tvar ${1:variable} = item.GetValue(\"${2:field}\");",
				"\titem.SetValue(\"${3:field}\", ${4:value});",
				"}"
			]
		},

	//#endregion

	//#region Comments

		"Short comment": 
		{
			"description": "Short comment",
			"prefix": ["comment", "short comment", "esker"],
			"body": ["$BLOCK_COMMENT_START [${1:author} $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE] T-${2:ticket number} ST-${3:ticket number} - ${4:description} $BLOCK_COMMENT_END"]
		},

		"Long comment": 
		{
			"description": "Long comment",
			"prefix": ["comment","long comment","esker"],
			"body": [
				"$BLOCK_COMMENT_START [${1:author} $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE] T-${2:ticket number} ST-${3:story number}",
				"* ${4:long description}",
				"*",
				"*",
				"$BLOCK_COMMENT_END"
			]
		},

		"Start&end comment": 
		{
			"description": "Start&end comment",
			"prefix": ["start end comment", "comment","esker"],
			"body": [
				"$BLOCK_COMMENT_START Start [${1:author} $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE] T-${2:ticket number} ST-${3:story number} ${4:description} $BLOCK_COMMENT_END",
				"$BLOCK_COMMENT_START End   [${1:author} $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE] T-${2:ticket number} ST-${3:story number} ${4:description} $BLOCK_COMMENT_END"
			]
		},

	//#endregion

	//#region Queries

		//#region Client side

			"Query.SAPQuery":
			{
				"description": "Query.SAPQuery [client]",
				"prefix": ["query.sapquery", "sap", "sap query", "query", "client query", "esker query", "esker"],
				"body": [
					"/* https://docptn.esker.com/eskerondemand/cv_ly/en/manager/startpage.htm#htmlpagescript/query/sapquery.html */ \n",

					"function queryCallback()",
					"{",
						"\tvar result = \"\";\n",

						"\tif (!this.GetQueryError() && this.GetRecordsCount() > 0)",
						"\t{",
							"\t\tresult = this.GetQueryValue(\"BELNR\", 0) + \" \" + this.GetQueryValue(\"GJAHR\", 0);",
						"\t}",
					"}\n",

					"var sapConf = Variable.GetValueAsString(\"SAPConfiguration\");",
					"var table = \"BKPF\";",
					"var fields = \"BELNR|GJAHR\";",
					"var options = \"BUKRS = '\" + companyCode + \"' AND GJAHR = '2020'\";\n",				
					"var rowCount = 1;           //default value -- maximum is 200",
					"var rowSkip = 0;            //default value",
					"var noData = false;         //default value",
					"var withAttributes = false; //default value",
					"var timeout = 30000;        //default value\n",

					"Query.SAPQuery(queryCallback, sapConf, table, fields, options, rowCount, rowSkip, noData, withAttributes, timeout);"
				]
				
			},

			"Query.DBQuery":
			{
				"description": "Query.DBQuery [client]",
				"prefix": ["query.dbquery", "dbquery", "query", "client query", "esker query", "esker"],
				"body": [
					"/* https://docptn.esker.com/eskerondemand/cv_ly/en/manager/startpage.htm#htmlpagescript/query/DBQuery.html */ \n",

					"function query_callback()",
					"{",
						"\tvar err = this.GetQueryError();",
						"\tif (err)",
						"\t{",
							"\t\tPopup.Alert(err);",
						"\t}",
						"\telse",
						"\t{",    
							"\t\tvar recordsCount = this.GetRecordsCount();",
							"\t\tvar item;",
							"\t\tvar tableItem = Data.GetTable(\"LineItemTable__\");",
							"\t\tvar idFromRecord;",
							"\t\tvar nameFromRecord;\n",
									
							"\t\t// Parse the retrieved records",
							"\t\tfor (var i=0 ; i < recordsCount ; i++)",
							"\t\t{",   
								"\t\t\t// For each record, retrieve the attribute value...",
								"\t\t\tidFromRecord = this.GetQueryValue(\"Product_Id__\", i);",             
								"\t\t\tnameFromRecord = this.GetQueryValue(\"Product_Name__\", i);\n",                                     
								
								"\t\t\t// Fill the table with the retrieved values",
								"\t\t\titem=tableItem.GetItem(i); // Gets the current line.",
								"\t\t\titem.SetValue(\"Product_Id__\",idFromRecord);",        
								"\t\t\titem.SetValue(\"Product_Name__\",nameFromRecord);",        
								"\t\t\ttableItem.AddItem(false); // Creates a new line in the table.",
							"\t\t}",
						"\t}",
					"}\n",

					"var object_to_query = \"myDataTable__\";          // Examples: CD#PHQG20061534 - CDNAME#Customer invoices (customer copy) - myTable__",
					"var attributes = \"Product_Id__|Product_name__\"; // if \"%FORMATTED\" is added the attribute will be displayed according to the settings (language, time zone, regional settings) of the user executing the HTML page script. Example: \"CompletionDateTime%FORMATTED\"",
					"var filter = \"\";                                // Exmple: (&(EmailAddress=*@example.com)(DisplayName=*John*))",
					"var sort_order = \"Product__ ASC\";               // to sort on several attributes separate by comma: \"VendorName ASC, InvoiceNumber ASC, InvoiceDate DESC\"",
					"var max_items = 100;                            // default value is 1 and maximum is 100",
					"var callback_instance = null;                   // default value",
					"var options = null;                             // interesting option: Distinct=1 allos you to retrieve distinct elements only\n",

					"Query.DBQuery(query_callback, object_to_query, attributes, filter, sort_order, max_items, callback_instance, options);"
				]
			},

		//#endregion

		//#region Server side

			"Process.CreateQueryAsProcessAdmin":
			{
				"description": "Process.CreateQueryAsProcessAdmin [server]",
				"prefix": ["createqueryasprocessadmin", "esker query", "process query", "esker", "createquery", "server query", "query"],
				"body": [
					"/* https://docptn.esker.com/eskerondemand/cv_ly/en/manager/startpage.htm#processingscripts/process/createqueryasprocessadmin.html?Highlight=Query */ \n",
					"var filter = \"(&(CompanyCode__=US01)(CostCenter__=1240)(Glaccount__=8300)(PeriodCode__=FY2015))\";\n",
 
 					"var processQuery = Process.CreateQueryAsProcessAdmin();",
					"processQuery.SetSpecificTable(\"PurchasingBudget__\");",
					"processQuery.SetFilter(filter);\n",
					
					"if (processQuery.MoveFirst())",
					"{\n",
					
						"\tvar record = processQuery.MoveNextRecord();",
						"\tif (record)",
						"\t{",
							"\t\tLog.Info(\"Found record\");\n",
					
							"\t\tvar vars = record.GetVars();",
							"\t\tvar total = vars.GetValue_Double(\"Budget__\", 0);\n",
					
							"\t\tLog.Info(\"Current budget is: \" + total);\n",
					
							"\t\ttotal++;",
							"\t\tLog.Info(\"Increment budget to: \" + total);\n",
					
							"\t\tvars.AddValue_Double(\"Budget__\", total, true);\n",
					
							"\t\t// Commit changes",
							"\t\trecord.Commit();\n",

							"\t\tif (record.GetLastError())",
							"\t\t{",
								"\t\t\tLog.Info(\"Commit did not work: \" + processQuery.GetLastErrorMessage());",
							"\t\t}",
						"\t}",
						"\telse",
						"\t{",
							"\t\tLog.Info(\"No record found !\");",
						"\t}",
					"}",
					"else",
					"{",
						"\tLog.Info(\"MoveFirst does not work: \" + processQuery.GetLastErrorMessage());",
					"}"
				]	
			},

			"Sys.Helpers.Database.AddOrModifyTableRecord":
			{
				"description": "Sys.Helpers.Database.AddOrModifyTableRecord [server]",
				"prefix": ["sys.helpers.database.addormodifytablerecord", "addormodify", "addrecord", "modifyrecord", "esker query", "server query", "query", "esker"],
				"body": [
					"/* https://docptn.esker.com/eskerondemand/cv_ly/en/manager/startpage.htm#libraries/index.html */ \n",
					"var tableName = \"${1:tableName}\";",
					"var filter = \"${2:filter}\";",
					"var attributes = [",
					"\t /* if 'behavior' is incrementNumber then it adds the value to the existing amount in the record */",
					"\t{ \"name\": \"${3:tableFieldName1}\", \"value\": ${4:value}, behavior: \"incrementNumber\"},",
					"\t{ \"name\": \"${5:tableFieldName2}\", \"value\": ${6:value}}",
					"];",
					"",
					"Sys.Helpers.Database.AddOrModifyTableRecord(tableName, filter, attributes);"
				]
			},

			"Sys.Helpers.Database.GetFirstRecordResult":
			{
				"description": "Sys.Helpers.Database.GetFirstRecordResult [server]",
				"prefix": ["sys.helpers.database.getfirstrecordresult", "gerfirstrecord", "get first record", "first record", "esker query", "server query", "query", "esker"],
				"body": [
					"/* https://docptn.esker.com/eskerondemand/cv_ly/en/manager/startpage.htm#libraries/index.html */ \n",
					"var tableName = \"${1:tableName}\";",
					"var filter = \"${2:filter}\";",
					"",
					"var dbResult = Sys.Helpers.Database.GetFirstRecordResult(tableName, filter);",
					"",
					"if(dbResult)",
					"{",
					"\tvar ${3:field} = dbResult.GetValue_String(\"${3:field}\", 0);",
					"}",
					"else",
					"{",
					"\tLog.Warn(\"[CUSTOMIZATION RQ] No result found. Table: \" + tableName + \" Filter: \" + filter);",
					"}"
				]
			},

			"Sys.Helpers.Database.RemoveTableRecord":
			{
				"description": "Sys.Helpers.Database.RemoveTableRecord [server]",
				"prefix": ["sys.herlpers.database.removetablerecord", "removetablerecord", "remove record", "delete record", "esker query", "server query", "query", "esker"],
				"body": [
					"/* https://docptn.esker.com/eskerondemand/cv_ly/en/manager/startpage.htm#libraries/index.html */ \n",
					"var tableName = \"${1:tableName}\";",
					"var filter = \"${2:filter}\";",
					"",
					"Sys.Helpers.Database.RemoveTableRecord(tableName, filter);"
				]
			},

		//#endregion
		
		//#region Both sides

			"Sys.GenericAPI.Query":
			{
				"description": "Sys.GenericAPI.Query [client side]",
				"prefix": ["sys.genericapi.query", "genericapi", "generic api", "query", "common query", "esker"],
				"body": [
					"/* https://docptn.esker.com/eskerondemand/cv_ly/en/manager/startpage.htm#libraries/index.html */ \n",
					"var queryGenericAPICallback = function(result, error)",
					"{",
					"\tif (error)",
					"\t{",
					"\t\tLog.Error(\"[CUSTOMIZATION RQ] Query on table '\" + tableName + \"' failed. Details: \" + JSON.stringify(error));",
					"\t}",
					"\telse if (result.length == 0)",
					"\t{",
					"\t\tLog.Warn(\"[CUSTOMIZATION RQ] Query on table '\" + tableName + \"' without result. filer: \" + filter);",
					"\t}",
					"\telse",
					"\t{",
					"\t\tfor(var i = 0; i < result.length; i++)",
					"\t\t{",
					"\t\t\tvar ${2:attribute1} = result[i][\"${2:attribute1}\"];",
					"\t\t}",
					"\t}",
					"};",
					"",
					"var tableName = \"${1:tableName}\";",
					"var attributes = [\"${2:attribute1}\", \"${3:attribute2}\"];",
					"var filter = ${4:\"\"};",
					"",
					"//Optional GenericAPI.Query parameters",
					"var sortOrder = ${5:\"\"};",
					"var maxRecordCount = ${6:100};",
					"var options = ${7:null};",
					"",
					"Sys.GenericAPI.Query(tableName, filter, attributes, queryGenericAPICallback, sortOrder, maxRecordCount, options);"
				]
			}
		
		//#endregion

	//#endregion
	
}